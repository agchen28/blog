<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on EdisonChen Blog</title>
    <link>https://agchen28.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on EdisonChen Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 30 Nov 2016 21:37:42 +0800</lastBuildDate>
    <atom:link href="https://agchen28.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>螺丝刀</title>
      <link>https://agchen28.github.io/blog/%E8%9E%BA%E4%B8%9D%E5%88%80/</link>
      <pubDate>Wed, 30 Nov 2016 21:37:42 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/%E8%9E%BA%E4%B8%9D%E5%88%80/</guid>
      <description>

&lt;h3 id=&#34;晒几张图&#34;&gt;晒几张图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://agchen28.github.io/imgs/lsd/1.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://agchen28.github.io/imgs/lsd/3.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://agchen28.github.io/imgs/lsd/4.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://agchen28.github.io/imgs/lsd/5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;22合一。
还可以伸缩。
观望好久了，79块大洋入的，现在应该没有这个价了。
跟九块九包邮的手感真的是差好多。
以后就靠这个吃饭了，准备改行捡垃圾。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>捡cpu</title>
      <link>https://agchen28.github.io/blog/%E6%8D%A1cpu/</link>
      <pubDate>Tue, 29 Nov 2016 22:37:30 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/%E6%8D%A1cpu/</guid>
      <description>

&lt;h3 id=&#34;需求&#34;&gt;需求&lt;/h3&gt;

&lt;p&gt;笔记本的U是T6670。
主要参数：双核，2.2GHz，2M二缓，TDP35W。
平时使用倒也没有遇到什么瓶颈，主要需求就是闲得蛋疼瞎折腾。
先上一张鲁大娘。
&lt;img src=&#34;https://agchen28.github.io/imgs/t9600/ludashi.jpg&#34; width = &#34;700&#34; height = &#34;500&#34; align=center /&gt;&lt;/p&gt;

&lt;h3 id=&#34;方案&#34;&gt;方案&lt;/h3&gt;

&lt;p&gt;先看插槽和芯片组，虽然看不太懂，不过插槽类型一定要一样。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;同系列升级，省心方便。只看T9系列，可以考虑的有T9900、T9800、T9600等。
这几个除了主频之外都是一样的规格，6M二缓，主频逐级提升，价格也随之提高。
特别是T9900，作为该系列最顶级的U，这么多年过去了居然还敢卖三百块，简直太奸商了。&lt;/li&gt;
&lt;li&gt;P系列。也只看最顶级的P9系列，P9700、P9600等。
跟T系列差不多的规格，该系列特点就是低温低功耗，P9600的TDP就25W。
强烈推荐，特别是考虑到功耗和散热问题。
当然同主频的价格就比T系列高得多，这两个到现在也还要一两百。&lt;/li&gt;
&lt;li&gt;升四核。Q9000、Q9100、QX9300。
这几个应该是属于传说中的胶水四核，不过好歹也是四核。Q9100和QX9300有12M二缓。缺点高温高功耗。最大的缺点——贵。
四核真的非常诱人不过不确定装上去是否可以用，即使可以用散热估计也吃不消而且还要考虑到功耗的问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;实施&#34;&gt;实施&lt;/h3&gt;

&lt;p&gt;最后，既贪心又抠门的我还是纠结地选择了主频高价格低的T系列。
咬牙掏了七十几块大洋捡了个T9600。2.8GHz主频，6M二缓，相对之前的提升应该还是挺明显的。
之所以没上T9800和T9900是因为不能让奸商得逞。性价比不高。
晒张照。
&lt;img src=&#34;https://agchen28.github.io/imgs/t9600/t9600.jpg&#34; width = &#34;612&#34; height = &#34;816&#34; alt=&#34;t9600&#34; align=center /&gt;&lt;/p&gt;

&lt;p&gt;手上拿的这个就是T9600，下面那块沾满翔的就是老战友T6670。
搞定之后再跑一张鲁大娘。
&lt;img src=&#34;https://agchen28.github.io/imgs/t9600/ludashi1.jpg&#34; width = &#34;700&#34; height = &#34;500&#34; align=center /&gt;&lt;/p&gt;

&lt;p&gt;瞬间秒杀全国百分之九的用户，还带动了其他配件性能的提升。
先来两把实况8爽一爽。&lt;/p&gt;

&lt;h3 id=&#34;反馈&#34;&gt;反馈&lt;/h3&gt;

&lt;p&gt;平时使用中CPU满载的话温度会偏高，正好冬天来了可以暖手。
看来五块钱一罐的硅脂有点不够用，还得加钱上好一点的。
后悔没上P系列，不过庆幸没上T9900或者升四核。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://agchen28.github.io/blog/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 04 Nov 2016 22:04:14 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>

&lt;h3 id=&#34;单例模式-singleton-pattern&#34;&gt;单例模式（Singleton Pattern）&lt;/h3&gt;

&lt;p&gt;有翻译成单件或者单态。反正它的特点就是单，比单身狗还单。
单身狗经常还会搞搞基，
单例想搞个基都找不到同类，它是一个独一无二的对象。
理解上一般没什么问题，但是实现上还是可以稍微扯下蛋的。&lt;/p&gt;

&lt;h2 id=&#34;常见的实现方式&#34;&gt;常见的实现方式&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public sealed class Singleton
    {
        //需要一个额外的Object对象来实现线程同步
        private static Object s_lock = new Object();
        //一个静态字段来引用一个单实例对象
        private static Singleton uniqueInstance;

        //私有构造器，阻止外部任何代码创建实例
        private Singleton() 
        {
            //初始化的代码
        }
        
        //一个全局访问点，返回单实例对象
        public static Singleton GetSingleton()
        {
             //巧妙之处在此：如果对象以及创建，不需要进行线程同步，直接返回
            if (uniqueInstance == null)
            {
                //锁了Object对象，保证同时只有一个线程执行以下代码块
                lock (s_lock)
                {
                    //再次判断，如果还未创建则进行创建
                    if (uniqueInstance == null)
                        uniqueInstance = new Singleton();
                }
            }
            return uniqueInstance;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;几个关键&#34;&gt;几个关键&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;私有的构造函数&lt;/li&gt;
&lt;li&gt;一个全局访问点GetSingleton&lt;/li&gt;
&lt;li&gt;还有就是不得不提的双检锁（Double-Check Locking）技术&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样的实现在工作中很常见。
看起来好像很完美，但是这个实现是有一点问题的。
不过出问题的概率极低，关键是大多时候他们需要的并不是一个真正的单例。&lt;/p&gt;

&lt;h2 id=&#34;问题所在&#34;&gt;问题所在&lt;/h2&gt;

&lt;h3 id=&#34;著名的双检锁技术-double-check-locking&#34;&gt;著名的双检锁技术（Double-Check Locking）&lt;/h3&gt;

&lt;p&gt;讲到单例模式就不得不提双检锁技术。
之所以出名并不是因为这个技术非常牛逼，而是因为它曾经是人们热烈讨论的话题。
该技术曾经在java中大量使用，结果后来被发现是有问题的。&lt;/p&gt;

&lt;h3 id=&#34;贴段代码&#34;&gt;贴段代码&lt;/h3&gt;

&lt;p&gt;既然曾经是在java中大量使用，那就贴段java代码来看个究竟吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Singleton {
    private static Singleton uniqueInstance;

    private Singleton() {
        //初始化的代码
    }

    public static Singleton getInstance() {
        //问题之处也在此：JVM这时会将uniqueInstance写入CPU寄存器
        if (uniqueInstance == null) {
            //锁了该类型对象（.NET中是这么叫法）
            synchronized (Singleton.class) {
                //假设有多个线程同时调用getInstance方法
                //当第二个线程执行到这边的时候，uniqueInstance实例已经由第一个线程创建好
                //但是JVM会从CPU寄存器中取值，造成该判断为true，第二个线程仍然会再创建实例
                if (uniqueInstance == null) {
                    uniqueInstance = new Singleton();
                }
            }
        }
        return uniqueInstance;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;抄一段话&#34;&gt;抄一段话&lt;/h3&gt;

&lt;p&gt;在CLR（扯到一个不得了的概念，先不管）中，对任何锁方法的调用都构成了一个完整的内存栅栏，在栅栏之前写入的任何变量都必须在栅栏之前完成；在栅栏之后的任何变量读取都必须在栅栏之后开始。（书上抄过来的话就是这么不好理解）&lt;/p&gt;

&lt;p&gt;总之在这边就可以这么理解：在lock之后，uniqueInstance字段的值必须重新去内存中读取，CPU寄存器里面的东西做不了数。
听他这么一忽悠好像C#这么实现就没什么问题了，结果吹了半天还有另外一个问题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;uniqueInstance = new Singleton();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;问题就出在这么简单的一句代码上，编译器会将这句代码编译成计算机认识的指令。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们觉得它应该会这么干：先分配内存；再调用构造器来初始化字段；最后将引用赋值给uniqueInstance。&lt;/li&gt;
&lt;li&gt;其实它有可能这么干：先分配内存；将引用赋值给uniqueInstance；最后再调用构造器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这么搞就出问题了。
如果将引用赋值给uniqueInstance之后调用构造器之前，另一个线程来执行GetSingleton方法，它会发现uniqueInstance不为null，接着开始使用它，但是这时构造函数可能还没执行完呢。&lt;/p&gt;

&lt;h2 id=&#34;正确的姿势&#34;&gt;正确的姿势&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//解决java和C#中的这两个问题，简单的做法就是用volatile关键字来标记uniqueInstance字段
//恰好c#和java中都是同样的关键字
//其实更好的做法是使用Volatile.Write静态方法，这个之后有讲volatile再详细说
 private volatile static Singleton uniqueInstance;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单说一下volatile关键字的作用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使uniqueInstance的读取和写入具有“易变性”（保证构造函数在uniqueInstance写入之前结束运行）&lt;/li&gt;
&lt;li&gt;编译器将不会将字段缓存到CPU寄存器中，所有的读写操作都在RAM中进行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;更简单的实现&#34;&gt;更简单的实现&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public sealed class Singleton
    {
        //第一次使用该类型的时候，类型构造器被调用创建我们的单实例对象
        private static Singleton uniqueInstance = new Singleton();

        private Singleton() { }

        public static Singleton GetSingleton()
        {
            return uniqueInstance;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种实现方式利用了类型构造器来创建单实例，由于类型构造器只会被调用一次，所以由始至终我们都只会创建一次实例对象。&lt;/p&gt;

&lt;h3 id=&#34;两种实现的优劣&#34;&gt;两种实现的优劣&lt;/h3&gt;

&lt;p&gt;最后，我们把思路撸一撸，来比较一下这两种实现方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类型构造器：当第一次使用到这个类型的时候，单实例对象就会被构造出来，即使我并不打算使用这个对象。&lt;/li&gt;
&lt;li&gt;双检锁技术：在真正需要使用到单实例对象的时候才将它初始化出来。如果这个单实例对象大得一逼，非常占用内存，或者不一定准备使用到它，可以考虑使用双检锁技术。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好像写得有点多了，我自己回头看了一下都有点眼花了。
其实扯了这么多都没什么卵用，一句话总结就是：能用类型构造器实现就用类型构造器，真正有需要再考虑双检锁。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>